(

(def car : lambda x : x CAR)
(def cdr : lambda x : x CDR)
(def cons : lambda x : lambda y : y x CONS)
(def , : lambda x : x SWAP CONS)
(def cadr : lambda x : car : cdr x)
(def dcons : lambda x : cons x x)
(def dcons1 : lambda x : x ARG y : cons %y %y)
(def == : lambda x : x EQUAL)
(def then THEN)
(def unift : lambda x : lambda y : y x 'true UNIF)
(def in : lambda x : x IN)

(def match : lambda x : 
 x 'true UNIF DUP AND : 
 DUP GETENV SWAP APPEND SETENV)

(def SDBS : ARG x %('_DBS x))

(def SDBL : ARG x %('_DBL x))

(def SDBML : ARG x %('_DBML x))
 
(def SDBNAME : ARG u : ARG x : ARG y :
 %x %y EQUAL THEN %u :
 %y NCONSPTHEN %y :
 %y %x IN NOT THEN %y :
 %y CAR '_DBL EQ THEN (%y CDR CAR %x %u SDBS SDBNAME SDBL) :
 %y CAR '_DBML EQ THEN (%y CDR CAR %x %u SDBS SDBNAME SDBML) :
 %y CDR %x %u SDBNAME %y CAR %x %u SDBNAME CONS)

(def SINT : ARG x :
 %x NCONSPTHEN %x :
 (%x CAR 'slambda EQ AND : %x CDR CONSP AND : %x CDR CDR CONSP) THEN
  (%x CDR CDR CAR %x CDR CAR SLAMBDA) :
 (%x CAR 'smlambda EQ AND : %x CDR CONSP AND : %x CDR CDR CONSP) THEN
  (%x CDR CDR CAR %x CDR CAR SMLAMBDA) :
 %x CDR SINT %x CAR SINT CONS)

(def SLAMBDA : ARG x : ARG a : 
 %a SINT %x SINT '_DB0 SDBNAME SDBL)

(def SMLAMBDA : ARG x : ARG a :
 %a SINT %x SINT '_DB0 SDBNAME SDBML)

(def slambda : C QUOTE : C QUOTE : 
 SWAP SLAMBDA EXEC)

(def smlambda : C QUOTE : C QUOTE : 
 SWAP SMLAMBDA EXEC)


{
(def car : C QUOTE : ARG x : %(x 'CAR) EXEC)
(def cdr : C QUOTE : ARG x : %(x 'CDR) EXEC)
(def cons : C QUOTE : C QUOTE : ARG x : ARG y : %(x y 'CONS) EXEC)
(def , : C QUOTE : ARG x : %(x 'SWAP 'CONS) EXEC)
(def cadr1 : C QUOTE : ARG x : %('car ('cdr x)) EXEC)
}

{
(def lambda : C QUOTE : C QUOTE ((ARG b : ARG x %('C 'QUOTE : 'ARG x : 'QUOTE b 'GETENV 'CONSTR 'EXEC)) EXEC)) 

(def car1 : lambda x : &x CAR)

(def cadr : lambda x : car : cdr &x)
}

{ (def list2 : lambda x : lambda y : cons &x : cons &y '()) }


)
