(

(def car : _lambda x : x CAR)
(def cdr : _lambda x : x CDR)
(def cons : _lambda x : _lambda y : y x CONS)
(def , : _lambda x : x SWAP CONS)
(def consq : _mlambda x : _mlambda y : 'y 'x CONS)
(def cadr : _lambda x : car : cdr x)
(def dcons : _lambda x : cons x x)
(def dcons1 : _lambda x : x ARG y : cons %y %y)
(def === : _lambda x : x EQ)
(def == : _lambda x : x EQUAL)
(def then THEN)
(def unift : _lambda x : _lambda y : y x 'true UNIF)
(def in : _lambda x : x SWAP IN)

(def gettype : _lambda x : x GETTYPE)
(def getprop : _lambda x : _lambda y : y x GETPROP)
(def putprop : _lambda x : _lambda y : _lambda z : z y x PUTPROP)
(def exec : _lambda x : x EXEC)
(def last : _lambda x : x LAST)
(def butlast : _lambda x : x BUTLAST)
(def consp : _lambda x : x CONSP)
(def nconsp : _lambda x : x CONSP NOT)
(def not : _lambda x : x NOT)
(def print : _lambda x : x PRINT)
(def prin : _lambda x : x PRIN)
(def printstring : _lambda x : x PRINTSTRING)
(def append : _lambda a : _lambda b : b a APPEND)

(def split ARG)
(def is _slambda)
(def or OR)

{
(def CONTAINS : C QUOTE : ARG _f : ARG _x : ARG _l :
        %_l NCONSPTHEN '() :
        %_l CAR %_x %_f EXEC : DUP THEN I :
        DROP %_l CDR %_x QUOTE () %_f CONS QUOTE CONTAINS CONS EXEC)
}

(def contains : _mlambda f : ARG _x : ARG _l : 
 %_l NCONSPTHEN '() :
 (f %_x (car %_l)) OR :
 (cdr %_l) %_x contains f )


 


{
(def match : _lambda x : 
 x 'true UNIF DUP AND : 
 DUP GETENV SWAP APPEND SETENV)
}

(def match : _lambda x : _mlambda a : _mlambda b :
 x 'true UNIF DUP THEN
  (GETENV SWAP APPEND GETENV SWAP SETENV DIVE a CLIMB SETENV)
  (DROP b))
  


(def CDBS : ARG x %('_DBS x))

(def CDBL : ARG x %('_DBL x))

(def CDBML : ARG x %('_DBML x))

(def CDBLS : ARG x %('_DBLS x))
 
(def CDBNAME : ARG u : ARG x : ARG y :
 %x %y EQUAL THEN %u :
 %y NCONSPTHEN %y :
 %y %x IN NOT THEN %y :
 %y CAR '_DBL EQ THEN (%y CDR CAR %x %u CDBS CDBNAME CDBL) :
 %y CAR '_DBML EQ THEN (%y CDR CAR %x %u CDBS CDBNAME CDBML) :
 %y CAR '_DBLS EQ THEN (%y CDR CAR %x %u CDBS CDBNAME CDBLS) :
 %y CDR %x %u CDBNAME %y CAR %x %u CDBNAME CONS)

(def CINT : ARG x :
 %x NCONSPTHEN %x :
 (%x CAR 'lambda EQ AND : %x CDR CONSP AND : %x CDR CDR CONSP) THEN
  (%x CDR CDR CAR %x CDR CAR CLAMBDA) :
 (%x CAR 'mlambda EQ AND : %x CDR CONSP AND : %x CDR CDR CONSP) THEN
  (%x CDR CDR CAR %x CDR CAR CMLAMBDA) :
 (%x CAR 'slambda EQ AND : %x CDR CONSP AND : %x CDR CDR CONSP) THEN
  (%x CDR CDR CAR %x CDR CAR CSLAMBDA) :
 %x CDR CINT %x CAR CINT CONS)

(def CLAMBDA : ARG x : ARG a : 
 %a CINT %x CINT '_DB0 CDBNAME CDBL)

(def CMLAMBDA : ARG x : ARG a :
 %a CINT %x CINT '_DB0 CDBNAME CDBML)

(def CSLAMBDA : ARG x : ARG a :
 %a CINT %x CINT '_DB0 CDBNAME CDBLS)


(def eclambda : C QUOTE : C QUOTE : 
 SWAP CLAMBDA EXEC)

(def ecmlambda : C QUOTE : C QUOTE : 
 SWAP CMLAMBDA EXEC)

(def ecslambda : C QUOTE : C QUOTE :
 SWAP CSLAMBDA EXEC)


(def lambda : C QUOTE : C QUOTE :
 SWAP CLAMBDA)

(def mlambda : C QUOTE : C QUOTE : 
 SWAP CMLAMBDA)

(def slambda : C QUOTE : C QUOTE :
 SWAP CSLAMBDA)


(def define : C QUOTE : C QUOTE : SWAP DIVE EXEC CLIMB SETDEF)


{
(def car : C QUOTE : ARG x : %(x 'CAR) EXEC)
(def cdr : C QUOTE : ARG x : %(x 'CDR) EXEC)
(def cons : C QUOTE : C QUOTE : ARG x : ARG y : %(x y 'CONS) EXEC)
(def , : C QUOTE : ARG x : %(x 'SWAP 'CONS) EXEC)
(def cadr1 : C QUOTE : ARG x : %('car ('cdr x)) EXEC)
}

{
(def _lambda : C QUOTE : C QUOTE ((ARG b : ARG x %('C 'QUOTE : 'ARG x : 'QUOTE b 'GETENV 'CONSTR 'EXEC)) EXEC)) 

(def car1 : _lambda x : &x CAR)

(def cadr : _lambda x : car : cdr &x)
}

{ (def list2 : _lambda x : _lambda y : cons &x : cons &y '()) }


)
