[ZERO*A00]
#6000H { Begin of program }

{hexadecimal digits}
h,[digits]W
{0123456789ABCDEF}

{coding of loading of R0}
h,[code_load_R0]W
{[code_load_R0_ret]W
#23_
#1C,[load_value]R>,#F&,[digits]R+r_
#18,[load_value]R>,#F&,[digits]R+r_
#14,[load_value]R>,#F&,[digits]R+r_
#10,[load_value]R>,#F&,[digits]R+r_
#C,[load_value]R>,#F&,[digits]R+r_
#8,[load_value]R>,#F&,[digits]R+r_
#4,[load_value]R>,#F&,[digits]R+r_
[load_value]R,#F&,[digits]R+r_
#,[code_load_R0_ret]R?}

{string to display, terminated by null}
h,[hello]W
{Hello World !
}#_

{display a string}
h,[display]W
{[display_ret]W
:display_loop:
[display_ptr]Rr,
$display_end$?
[display_ptr]RrP
[display_ptr]R,#1+,[display_ptr]W
#,$display_loop$?
:display_end:
#,[display_ret]R?}

{read a word}
h,[read_word]W
{[read_word_ret]W

:read_word_loop:

G,[read_word_char]W
[read_word_char]R,#20-,$read_word_end$?
[read_word_char]R,#0A-,$read_word_end$?
[read_word_char]R,#0D-,$read_word_end$?
[read_word_char]R,[read_word_ptr]Rw,#1+,[read_word_ptr]W
#,$read_word_loop$?
:read_word_end:
#,[read_word_ptr]Rw,#1+,[read_word_ptr]W
#,[read_word_ret]R?}

{copy string}
h,[strcpy]W
{[strcpy_ret]W
}h,[strcpy_loop]W{
[strcpy_src]Rr,[strcpy_dst]Rw
[strcpy_src]Rr,}h,[strcpy_jmpadr]W{eeeeeeeee?
[strcpy_src]R,#1+,[strcpy_src]W
[strcpy_dst]R,#1+,[strcpy_dst]W
#,}[strcpy_loop]R,[load_value]W#,[code_load_R0]R?{?
}h,[strcpy_end]W
[strcpy_jmpadr]RH[strcpy_end]R,[load_value]W#,[code_load_R0]R?
[strcpy_end]RH{
#,[strcpy_ret]R?}

{compare strings}
h,[strcmp]W
{[strcmp_ret]W
:strcmp_loop:
[strcmp_ptr1]Rr,$strcmp_label1$?
[strcmp_ptr2]Rr,$strcmp_label2$?
[strcmp_ptr1]Rr,[strcmp_ptr2]Rr-,$strcmp_next$?
#1,[strcmp_result]W
#,$strcmp_end$?
:strcmp_next:
[strcmp_ptr1]R,#1+,[strcmp_ptr1]W
[strcmp_ptr2]R,#1+,[strcmp_ptr2]W
#,$strcmp_loop$?
:strcmp_label2:
#1,[strcmp_result]W
#,$strcmp_end$?
:strcmp_label1:
[strcmp_ptr2]Rr,$strcmp_label6$?
#1,[strcmp_result]W
#,$strcmp_end$?
:strcmp_label6:
#,[strcmp_result]W
:strcmp_end:
#,[strcmp_ret]R?}

{find or create word in dictionary}
h,[search_dic]W
{[search_dic_ret]W
#,[search_dic_new]W
:search_dic_loop:
[search_dic_ptr]RR,$search_dic_end$?
[search_dic_ptr]RR,[strcmp_ptr1]W
[search_dic_key]R,[strcmp_ptr2]W
#,[strcmp]R?
[strcmp_result]R,$search_dic_found$?
[search_dic_ptr]R,s+,s+,[search_dic_ptr]W
#,$search_dic_loop$?
:search_dic_end:
#1,[search_dic_new]W
[search_dic_ptr]R,s+R,[search_dic_ptr]RW
[search_dic_key]R,[strcpy_src]W
[search_dic_ptr]RR,[strcpy_dst]W
#,[strcpy]R?
[search_dic_ptr]R,s+,s+,s+,[search_dic_adr]W
[strcpy_dst]R,#1+,[search_dic_adr]RW
[search_dic_ptr]R,s+,s+,[search_dic_adr]W
#,[search_dic_adr]RW
:search_dic_found:
#,[search_dic_ret]R?}

{initial dictionary at address 3200 hex}
#,#3200W
#3200,s+,[adr]W
#4000,[adr]RW

{print hexadecimal}
h,[print_hex]W
{[print_hex_ret]W
#1C,[print_hex_nbr]R>,#F&,[digits]R+rP
#18,[print_hex_nbr]R>,#F&,[digits]R+rP
#14,[print_hex_nbr]R>,#F&,[digits]R+rP
#10,[print_hex_nbr]R>,#F&,[digits]R+rP
#C,[print_hex_nbr]R>,#F&,[digits]R+rP
#8,[print_hex_nbr]R>,#F&,[digits]R+rP
#4,[print_hex_nbr]R>,#F&,[digits]R+rP
[print_hex_nbr]R,#F&,[digits]R+rP
#,[print_hex_ret]R?}

h,[mplc_redef_msg]W {Error} #3A_ { label redefined
}#_
h,[mplc_str1]W #7D_{h,\[}#_
h,[mplc_str11]W {]W
}#_
h,[mplc_str2]W {\[}#_
h,[mplc_str3]W {_ref}#_
h,[mplc_str4]W {]RH\[}#_
h,[mplc_str5]W {]R,\[load_value]W#,\[code_load_R0]R?}#_
h,[mplc_str6]W {]RH{}#_
h,[mplc_str7]W #7D_{\[}#_
h,[mplc_str8]W {{}#_
h,[mplc_str9]W {]W{eeeeeeeee}#_ 
h,[eol]W {
}#_

{MPL compiler - labels}
h,[mplc_labels]W
{[mplc_ret]W
G,[mplc_char]W
:mplc_loop:
[mplc_char]R,#1+,$mplc_end$?
#F5,[mplc_char]R-,$mplc_end$?
[mplc_char]R,#5C-,$mplc_backslash$?
[mplc_char]R,#28-,$mplc_comment$?
[mplc_char]R,#3A-,$mplc_def$?
[mplc_char]R,#24-,$mplc_ref$?
[mplc_char]RP
G,[mplc_char]W
#,$mplc_loop$?
:mplc_backslash:
G,[mplc_char]W
#5CP
[mplc_char]RP
G,[mplc_char]W
#,$mplc_loop$?
:mplc_comment:
G,[mplc_char]W
[mplc_char]R,#29-,$mplc_end_comment$?
#,$mplc_comment$?
:mplc_end_comment:
G,[mplc_char]W
#,$mplc_loop$?
:mplc_def:
G,[mplc_char]W
#2000,[mplc_id_ptr]W
:mplc_id_loop1:
[mplc_char]R,#1+,$mplc_end$?
#F5,[mplc_char]R-,$mplc_end$?
[mplc_char]R,#3A-,$mplc_id_end1$?
[mplc_char]R,[mplc_id_ptr]Rw,#1+,[mplc_id_ptr]W
G,[mplc_char]W
#,$mplc_id_loop1$?
:mplc_id_end1:
G,[mplc_char]W
#,[mplc_id_ptr]Rw
#3200,[search_dic_ptr]W
#2000,[search_dic_key]W
#,[search_dic]R?
[search_dic_new]R,$mplc_not_new1$?
[search_dic_ptr]R,s+,[mplc_adr]W
#,[mplc_adr]RW
:mplc_not_new1:
[search_dic_ptr]R,s+R,[mplc_nrefs]W
[mplc_nrefs]R,#1+,$mplc_redef$?
[mplc_str1]R,[display_ptr]W#,[display]R?
#2000,[display_ptr]W#,[display]R?
[mplc_str11]R,[display_ptr]W#,[display]R?
#0,[mplc_i]W
:mplc_loop_mod_refs:
[mplc_nrefs]R,[mplc_i]R-,$mplc_end_mod_refs$?
[mplc_i]R,#1+,[mplc_i]W
[mplc_str2]R,[display_ptr]W#,[display]R?
#2000,[display_ptr]W#,[display]R?
[mplc_str3]R,[display_ptr]W#,[display]R?
[mplc_i]R,[print_hex_nbr]W#,[print_hex]R?
[mplc_str4]R,[display_ptr]W#,[display]R?
#2000,[display_ptr]W#,[display]R?
[mplc_str5]R,[display_ptr]W#,[display]R?
[eol]R,[display_ptr]W#,[display]R?
#,$mplc_loop_mod_refs$?
:mplc_end_mod_refs:
[mplc_str2]R,[display_ptr]W#,[display]R?
#2000,[display_ptr]W#,[display]R?
[mplc_str6]R,[display_ptr]W#,[display]R?
[search_dic_ptr]R,s+,[mplc_adr]W
#1,#-,[mplc_adr]RW
#,$mplc_loop$?
:mplc_redef:
[mplc_redef_msg]R,[display_ptr]W#,[display]R?Q
:mplc_ref:
G,[mplc_char]W
#2000,[mplc_id_ptr]W
:mplc_id_loop2:
[mplc_char]R,#1+,$mplc_end$?
#F5,[mplc_char]R-,$mplc_end$?
[mplc_char]R,#24-,$mplc_id_end2$?
[mplc_char]R,[mplc_id_ptr]Rw,#1+,[mplc_id_ptr]W
G,[mplc_char]W
#,$mplc_id_loop2$?
:mplc_id_end2:
G,[mplc_char]W
#,[mplc_id_ptr]Rw
#3200,[search_dic_ptr]W
#2000,[search_dic_key]W
#,[search_dic]R?
[search_dic_new]R,$mplc_not_new2$?
[search_dic_ptr]R,s+,[mplc_adr]W
#,[mplc_adr]RW
:mplc_not_new2:
[search_dic_ptr]R,s+R,[mplc_nrefs]W
[mplc_nrefs]R,#1+,$mplc_defined$?
[mplc_nrefs]R,#1+,[mplc_nrefs]W
[search_dic_ptr]R,s+,[mplc_adr]W
[mplc_nrefs]R,[mplc_adr]RW
[mplc_str1]R,[display_ptr]W#,[display]R?
#2000,[display_ptr]W#,[display]R?
[mplc_str3]R,[display_ptr]W#,[display]R?
[mplc_nrefs]R,[print_hex_nbr]W#,[print_hex]R?
[mplc_str9]R,[display_ptr]W#,[display]R?
#,$mplc_loop$?
:mplc_defined:
[mplc_str7]R,[display_ptr]W#,[display]R?
#2000,[display_ptr]W#,[display]R?
[mplc_str5]R,[display_ptr]W#,[display]R?
[mplc_str8]R,[display_ptr]W#,[display]R?
#,$mplc_loop$?
:mplc_end:
#,[mplc_ret]R?}

h,[txt_equal]W
{strings are equal
}#_

h,[txt_diff]W
{strings are different
}#_

{test}
h,[main]W
{[main_ret]W
#12345678,[print_hex_nbr]W
#,[print_hex]R?
[hello]R,[display_ptr]W
#,[display]R?
#2000,[read_word_ptr]W
#,[read_word]R?
#2000,[display_ptr]W
#,[display]R?
#2000,[strcpy_src]W
#2100,[strcpy_dst]W
#,[strcpy]R?
#2100,[display_ptr]W
#,[display]R?
#2200,[read_word_ptr]W
#,#[read_word]R?
#2000,[strcmp_ptr1]W
#2200,[strcmp_ptr2]W
#,[strcmp]R?
[strcmp_result]R,}h,[main_jmpadr1]W{eeeeeeeee?
[txt_diff]R,[display_ptr]W
#,[display]R?
#,}h,[main_jmpadr2]W{eeeeeeeee?
}h,[main_equal]W
[main_jmpadr1]RH[main_equal]R,[load_value]W#,[code_load_R0]R?
[main_equal]RH{
[txt_equal]R,[display_ptr]W
#,[display]R?
}h,[main_endcmp]W
[main_jmpadr2]RH[main_endcmp]R,[load_value]W#,[code_load_R0]R?
[main_endcmp]RH{
#2300,[read_word_ptr]W
#,#[read_word]R?
#3200,[search_dic_ptr]W
#2300,[search_dic_key]W
#,[search_dic]R?
[search_dic_ptr]R,[print_hex_nbr]W
#,[print_hex]R?#20P
[search_dic_new]R,[print_hex_nbr]W
#,[print_hex]R?#20P
#2400,[read_word_ptr]W
#,#[read_word]R?
#3200,[search_dic_ptr]W
#2400,[search_dic_key]W
#,[search_dic]R?
[search_dic_ptr]R,[print_hex_nbr]W
#,[print_hex]R?#20P
[search_dic_new]R,[print_hex_nbr]W
#,[print_hex]R?#20P
#,[main_ret]R?}

{call compiler}
#,[mplc_labels]R?
Q
