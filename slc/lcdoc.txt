LC PROGRAM - THEOREM PROVING IN COMBINATORY LOGIC

Example : reflexivity axioms for I, K and S :
(You type "d 1 A = I I", the program displays "d 1: A = I I -> I = I.")

$ ./lc55
Demonstration de theoremes de logique combinatoire
d 1 A = I I
d 1: A = I I -> I = I.
d 2 A = K K
d 2: A = K K -> K = K.
d 3 A = S S
d 3: A = S S -> S = S.


Application of proof 2 to proof 1 : reflexivity for K I :

d 4 a 2 1
d 4: a 2 1 -> -KI = -KI ; (K I) = (K I).


Extensionality for a symbol x:

d 5 A = x x
d 5: A = x x -> x = x.


Application of axiom defining I to x

d 6 I 5
d 6: I 5 -> -Ix = x ; (I x) = x.


Apply symmetry to proof 6 :

d 7 s 6
d 7: s 6 -> x = -Ix ; x = (I x).


Apply x to itself :

d 8 a 5 5
d 8: a 5 5 -> -xx = -xx ; (x x) = (x x).


Reflexivity for y:

d 9 A = y y
d 9: A = y y -> y = y.


Substitution : (^x (x x)) y = y y :

d 10 ^ 5 8 9
d 10: ^ 5 8 9 -> ---^x-xxy = -yy ; (((^ x) (x x)) y) = (y y).


Reduce I x to x :

r -Ix
d 501: I 5 -> -Ix = x ; (I x) = x.


Quit the program :

q
$


You can put all the inputcommands in a file, for example test.lci :

$ cat test.lci
d 1 A = I I
d 2 A = K K
d 3 A = S S
d 4 a 2 1
d 5 A = x x
d 6 I 5
d 7 s 6
d 8 a 5 5
d 9 A = y y
d 10 ^ 5 8 9
r -Ix

... and load this file :

$ ./lc55
Demonstration de theoremes de logique combinatoire
l test.lci
d 1: A = I I -> I = I.
d 2: A = K K -> K = K.
d 3: A = S S -> S = S.
d 4: a 2 1 -> -KI = -KI ; (K I) = (K I).
d 5: A = x x -> x = x.
d 6: I 5 -> -Ix = x ; (I x) = x.
d 7: s 6 -> x = -Ix ; x = (I x).
d 8: a 5 5 -> -xx = -xx ; (x x) = (x x).
d 9: A = y y -> y = y.
d 10: ^ 5 8 9 -> ---^x-xxy = -yy ; (((^ x) (x x)) y) = (y y).
d 501: I 5 -> -Ix = x ; (I x) = x.
q
$


Load file "lcs.lci" :

 ./lc55
Demonstration de theoremes de logique combinatoire
l lcs.lci
d 1: A = I I -> I = I.
d 2: A = K K -> K = K.
d 3: A = S S -> S = S.
d 4: A = Z Z -> Z = Z.
d 5: A = E E -> E = E.
d 6: A = e e -> e = e.
d 7: A = X X -> X = X.
d 8: A = ! ! -> ! = !.
d 11: A = --S--S-KSK-KI I -> ((S ((S (K S)) K)) (K I)) = I.
d 12: A = --S--S-KS--S-KK--S-KSK-KK -S-KK -> ((S ((S (K S)) ((S (K K)) ((S (K S)) K)))) (K K)) = (S (K K)).
d 13: A = --S-KS-S-KK K -> ((S (K S)) (S (K K))) = K.
d 14: A = --S-K-S-KS--S-KS-S-KS --S--S-KS--S-KK--S-KS-S-K-S-KSS -> ((S (K (S (K S)))) ((S (K S)) (S (K S)))) = ((S ((S (K S)) ((S (K K)) ((S (K S)) (S (K (S (K S)))))))) S).
d 15: A = -S-KI I -> (S (K I)) = I.
d 16: A = --S-K-S-KS--S-KS-S-KS --S--S-KS--S-KK--S-KS--S-K-S-KSS-KS -> ((S (K (S (K S)))) ((S (K S)) (S (K S)))) = ((S ((S (K S)) ((S (K K)) ((S (K S)) ((S (K (S (K S)))) S))))) (K S)).
d 21: A = --SEI -KI -> ((S E) I) = (K I).
d 22: A = --S--S-KSeK --S--S-KSe-KI -> ((S ((S (K S)) e)) K) = ((S ((S (K S)) e)) (K I)).
d 23: A = --S-K-S-KS--S-K-S-KKe --S--S-KS--S-K-S-KS--S-K-S-K-S-KS--S-K-S-K-S-KKe--S-K-S-KKe -> ((S (K (S (K S)))) ((S (K (S (K K)))) e)) = ((S ((S (K S)) ((S (K (S (K S)))) ((S (K (S (K (S (K S)))))) ((S (K (S (K (S (K K)))))) e))))) ((S (K (S (K K)))) e)).
d 31: S 2 2 7 -> ---SKKX = --KX-KX ; (((S K) K) X) = ((K X) (K X)).
d 32: a 2 7 -> -KX = -KX ; (K X) = (K X).
d 33: K 7 32 -> --KX-KX = X ; ((K X) (K X)) = X.
d 34: t 31 33 -> ---SKKX = X ; (((S K) K) X) = X.
d 41: A = x x -> x = x.
d 42: A = y y -> y = y.
d 43: A = z z -> z = z.
d 51: A = t t -> t = t.
d 52: A = o o -> o = o.
d 53: A = u u -> u = u.
d 54: A = f f -> f = f.
d 61: A = -to I -> (t o) = I.
d 62: A = -tu I -> (t u) = I.
d 63: A = --S--S-KS--S-KK--S--S-K!t-KI--S-K-S--S--S-K!t-KI--S-K-S-Ktf --S--S-KS--S-KK--S--S-K!t-KI-K--S--S--S-K!t-KI-KI -> ((S ((S (K S)) ((S (K K)) ((S ((S (K !)) t)) (K I))))) ((S (K (S ((S ((S (K !)) t)) (K I))))) ((S (K (S (K t)))) f))) = ((S ((S (K S)) ((S (K K)) ((S ((S (K !)) t)) (K I))))) (K ((S ((S ((S (K !)) t)) (K I))) (K I)))).
d 71: A = --S!I -KI -> ((S !) I) = (K I).
d 72: A = i i -> i = i.
d 73: A = k k -> k = k.
d 74: A = s s -> s = s.
d 80: A = & & -> & = &.
d 81: A = T T -> T = T.
d 82: A = --S-KTi --SfI -> ((S (K T)) i) = ((S f) I).
d 83: A = --S-K-S-KTk --S--S-KS--S-KKf--S-K-SfK -> ((S (K (S (K T)))) k) = ((S ((S (K S)) ((S (K K)) f))) ((S (K (S f))) K)).
d 84: A = --S-K-S-K-S-KTs --S--S-KS--S-K-S-KS--S-K-S-K-S-Kf--S--S-KS--S-KK--S-KS--S-KKf-Kf--S--S-KS--S-K-S-KS--S-K-S-KK--S-K-S-Kff--S-KKf -> ((S (K (S (K (S (K T)))))) s) = ((S ((S (K S)) ((S (K (S (K S)))) ((S (K (S (K (S (K f)))))) ((S ((S (K S)) ((S (K K)) ((S (K S)) ((S (K K)) f))))) (K f)))))) ((S ((S (K S)) ((S (K (S (K S)))) ((S (K (S (K K)))) ((S (K (S (K f)))) f))))) ((S (K K)) f))).
d 85: A = --S--S-KS--S-KK--S-KS--S-K-S-KS--S--S-KS--S-KK--S-KS--S-KK--S-K!T-Kf--S-K-S-K-S-KK--S-K-S--S-KS--S-K!T--S-K-S-KK--S-K-S-KT& --S--S-KS--S-KK--S-KS--S-K-S-KS--S--S-KS--S-KK--S-KS--S-KK--S-K!T-Kf-K--S-K!T -> ((S ((S (K S)) ((S (K K)) ((S (K S)) ((S (K (S (K S)))) ((S ((S (K S)) ((S (K K)) ((S (K S)) ((S (K K)) ((S (K !)) T)))))) (K f))))))) ((S (K (S (K (S (K K)))))) ((S (K (S ((S (K S)) ((S (K !)) T))))) ((S (K (S (K K)))) ((S (K (S (K T)))) &))))) = ((S ((S (K S)) ((S (K K)) ((S (K S)) ((S (K (S (K S)))) ((S ((S (K S)) ((S (K K)) ((S (K S)) ((S (K K)) ((S (K !)) T)))))) (K f))))))) (K ((S (K !)) T))).
d 101: A = a a -> a = a.
d 102: A = b b -> b = b.
d 103: A = c c -> c = c.


Reduce S K K a to a :

r ---SKKa
d 504: t 501 503 -> ---SKKa = a ; (((S K) K) a) = a.
