
LET Y [[* *] ['* (* *)]]

LET MP ^p ^q = - (imp p q) - p q [*]
LET AI ^p = (imp p p) [*]
LET AK ^p ^q = (imp p (imp q p)) [*]
LET AS ^p ^q ^r = (imp (imp p (imp q r)) (imp (imp p q) (imp p r))) [*]
LET EFQ ^p = (imp false p) [*]
LET RAA ^p = (imp (imp (imp p false) false) p) [*]

LET c (Y [imp * false])

LET cecif
 LTS STL STL STL STL c
     STL STL (imp c false)

LET cic ESQ (AI c)
LET cicecicif (imp c cecif)
LET cicif LTS LTS cic cicecicif [*]      
LET instas ESQ ESQ ESQ (AS c c false)
LET instmp ESQ ESQ (MP (imp c (imp c false)) (imp (imp c c) (imp c false)))
LET l1 (instas (imp c (imp c false) (imp (imp c c) (imp c false))))               
LET l2 LTS l1 instmp
LET l3 (cicif (imp (imp c c) (imp c false)))
LET l4 LTS l3 STL l2
LET l5 ESQ ESQ (MP (imp c c) (imp c false))
LET l6 (l4 ((imp c c) (imp c false)))
LET l7 LTS STL STR l6 l5
LET l8 (cic (imp c false))
LET l9 LTS l8 l7
LET cifec LTS cecif c
LET l10 LTS cifec STL l9
LET l11 ESQ ESQ (MP c false)
LET l12 (l9 (c false))
LET l13 LTS STL STR l12 l11
LET l14 (l10 false)
LET l15 LTS l14 l13
LET l16 STR - [*] false

LTS l16 l15

